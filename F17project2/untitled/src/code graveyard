




//helpers
//
//    //helper1
//        //check to see if any surrounding slots are open
//    private boolean checkOpen() {
////        for (int r = 0; r < size; r++) {
////            for (int c = 0; c < size; c++) {
////                //IF!!! there is something here, then go to the next step.
////                if(board[r][c].getPlayerNumber() > 0) {
////                    //if corners
////                    if (r == 0 && c == 0) {//top left
////                        int count = 0;
////                        count += check(r + 1, c);
////                        count += check(r, c + 1);
////                        if (count == 2) {
////                            System.out.println(r + "," + c + " sides are not open, time to check side identity");
////                            return false;
////                        } else {
////                            return true;
////                        }
////                    }if (r == 0 && c == size - 1) {//top right
////                        int count = 0;
////                        count += check(r + 1, c);
////                        count += check(r, c - 1);
////                        if (count == 2) {
////                            System.out.println(r + "," + c + " sides are not open, time to check side identity");
////                            return false;
////                        } else {
////                            return true;
////                        }
////                    }if (r == (size - 1) && c == 0) {//bottom left
////                        int count = 0;
////                        count += check(r - 1, c);
////                        count += check(r, c + 1);
////                        if (count == 2) {
////                            System.out.println(r + "," + c + " sides are not open, time to check side identity");
////                            return false;
////                        } else {
////                            return true;
////                        }
////                    }if (r == (size - 1) && c == (size - 1)) {//bottom right
////                        int count = 0;
////                        count += check(r - 1, c);
////                        count += check(r, c - 1);
////                        if (count == 2) {
////                            System.out.println(r + "," + c + " sides are not open, time to check side identity");
////                            return false;
////                        } else {
////                            return true;
////                        }
////                    }
////                    //if sides
////                    if (c == 0) {//left side
////                        int count = 0;
////                        count += check(r - 1, c);
////                        count += check(r, c + 1);
////                        count += check(r + 1, c);
////                        if (count == 3) {
////                            System.out.println(r + "," + c + " sides are not open, time to check side identity");
////                            return false;
////                        } else {
////                            return true;
////                        }
////
////                    } else if (c == (size - 1)) {//right side
////
////                    } else if (r == 0) {//top
////
////                    } else if (r == (size - 1)) {//bottom
////
////                    }
////                    //otherwise
////                    //check on ALL sides
////                }
////            }
////        }
////        return false;
////    }
////
////    private int check(int r, int c){
////            if(board[r][c].getPlayerNumber() > 0){
////                return 1;
////            }
////        return 0;
////    }
////
////    //helper2
////        //check to see who has surrounded you
//    }

private void clearBoard(){
        centerPanel.removeAll();
        centerPanel.setLayout(new GridLayout(size, size));
        board = new JButton[size][size];
        game.reset();
    }
    private void setBoard(){
        for (int r = 0; r < size; r++){
            for (int c = 0; c < size; c++){
                board[r][c] = new JButton(" ");
                board[r][c].addActionListener(listener);
                centerPanel.add(board[r][c]);
            }
        }
    }